// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"orkester/ent/album"
	"orkester/ent/image"
	"orkester/ent/likedtrack"
	"orkester/ent/track"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// TrackNumber holds the value of the "track_number" field.
	TrackNumber int `json:"track_number,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Length holds the value of the "length" field.
	Length int `json:"length,omitempty"`
	// Mimetype holds the value of the "mimetype" field.
	Mimetype string `json:"mimetype,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackQuery when eager-loading is set.
	Edges        TrackEdges `json:"edges"`
	album_tracks *int
	track_image  *int
	selectValues sql.SelectValues
}

// TrackEdges holds the relations/edges for other nodes in the graph.
type TrackEdges struct {
	// Artists holds the value of the artists edge.
	Artists []*Artist `json:"artists,omitempty"`
	// Album holds the value of the album edge.
	Album *Album `json:"album,omitempty"`
	// Liked holds the value of the liked edge.
	Liked *LikedTrack `json:"liked,omitempty"`
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ArtistsOrErr returns the Artists value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) ArtistsOrErr() ([]*Artist, error) {
	if e.loadedTypes[0] {
		return e.Artists, nil
	}
	return nil, &NotLoadedError{edge: "artists"}
}

// AlbumOrErr returns the Album value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackEdges) AlbumOrErr() (*Album, error) {
	if e.Album != nil {
		return e.Album, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: album.Label}
	}
	return nil, &NotLoadedError{edge: "album"}
}

// LikedOrErr returns the Liked value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackEdges) LikedOrErr() (*LikedTrack, error) {
	if e.Liked != nil {
		return e.Liked, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: likedtrack.Label}
	}
	return nil, &NotLoadedError{edge: "liked"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackEdges) ImageOrErr() (*Image, error) {
	if e.Image != nil {
		return e.Image, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case track.FieldID, track.FieldTrackNumber, track.FieldLength:
			values[i] = new(sql.NullInt64)
		case track.FieldTitle, track.FieldPath, track.FieldMimetype:
			values[i] = new(sql.NullString)
		case track.ForeignKeys[0]: // album_tracks
			values[i] = new(sql.NullInt64)
		case track.ForeignKeys[1]: // track_image
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case track.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case track.FieldTrackNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field track_number", values[i])
			} else if value.Valid {
				t.TrackNumber = int(value.Int64)
			}
		case track.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				t.Path = value.String
			}
		case track.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				t.Length = int(value.Int64)
			}
		case track.FieldMimetype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mimetype", values[i])
			} else if value.Valid {
				t.Mimetype = value.String
			}
		case track.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field album_tracks", value)
			} else if value.Valid {
				t.album_tracks = new(int)
				*t.album_tracks = int(value.Int64)
			}
		case track.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field track_image", value)
			} else if value.Valid {
				t.track_image = new(int)
				*t.track_image = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Track.
// This includes values selected through modifiers, order, etc.
func (t *Track) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryArtists queries the "artists" edge of the Track entity.
func (t *Track) QueryArtists() *ArtistQuery {
	return NewTrackClient(t.config).QueryArtists(t)
}

// QueryAlbum queries the "album" edge of the Track entity.
func (t *Track) QueryAlbum() *AlbumQuery {
	return NewTrackClient(t.config).QueryAlbum(t)
}

// QueryLiked queries the "liked" edge of the Track entity.
func (t *Track) QueryLiked() *LikedTrackQuery {
	return NewTrackClient(t.config).QueryLiked(t)
}

// QueryImage queries the "image" edge of the Track entity.
func (t *Track) QueryImage() *ImageQuery {
	return NewTrackClient(t.config).QueryImage(t)
}

// Update returns a builder for updating this Track.
// Note that you need to call Track.Unwrap() before calling this method if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return NewTrackClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Track entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("track_number=")
	builder.WriteString(fmt.Sprintf("%v", t.TrackNumber))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(t.Path)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", t.Length))
	builder.WriteString(", ")
	builder.WriteString("mimetype=")
	builder.WriteString(t.Mimetype)
	builder.WriteByte(')')
	return builder.String()
}

// Tracks is a parsable slice of Track.
type Tracks []*Track
