// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orkester/ent/likedtrack"
	"orkester/ent/track"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// LikedTrack is the model entity for the LikedTrack schema.
type LikedTrack struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateAdded holds the value of the "date_added" field.
	DateAdded time.Time `json:"date_added,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikedTrackQuery when eager-loading is set.
	Edges       LikedTrackEdges `json:"edges"`
	track_liked *int
}

// LikedTrackEdges holds the relations/edges for other nodes in the graph.
type LikedTrackEdges struct {
	// Track holds the value of the track edge.
	Track *Track `json:"track,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TrackOrErr returns the Track value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikedTrackEdges) TrackOrErr() (*Track, error) {
	if e.loadedTypes[0] {
		if e.Track == nil {
			// The edge track was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: track.Label}
		}
		return e.Track, nil
	}
	return nil, &NotLoadedError{edge: "track"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikedTrack) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case likedtrack.FieldID:
			values[i] = new(sql.NullInt64)
		case likedtrack.FieldDateAdded:
			values[i] = new(sql.NullTime)
		case likedtrack.ForeignKeys[0]: // track_liked
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LikedTrack", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikedTrack fields.
func (lt *LikedTrack) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likedtrack.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lt.ID = int(value.Int64)
		case likedtrack.FieldDateAdded:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_added", values[i])
			} else if value.Valid {
				lt.DateAdded = value.Time
			}
		case likedtrack.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field track_liked", value)
			} else if value.Valid {
				lt.track_liked = new(int)
				*lt.track_liked = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTrack queries the "track" edge of the LikedTrack entity.
func (lt *LikedTrack) QueryTrack() *TrackQuery {
	return (&LikedTrackClient{config: lt.config}).QueryTrack(lt)
}

// Update returns a builder for updating this LikedTrack.
// Note that you need to call LikedTrack.Unwrap() before calling this method if this LikedTrack
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LikedTrack) Update() *LikedTrackUpdateOne {
	return (&LikedTrackClient{config: lt.config}).UpdateOne(lt)
}

// Unwrap unwraps the LikedTrack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LikedTrack) Unwrap() *LikedTrack {
	tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikedTrack is not a transactional entity")
	}
	lt.config.driver = tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LikedTrack) String() string {
	var builder strings.Builder
	builder.WriteString("LikedTrack(")
	builder.WriteString(fmt.Sprintf("id=%v", lt.ID))
	builder.WriteString(", date_added=")
	builder.WriteString(lt.DateAdded.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LikedTracks is a parsable slice of LikedTrack.
type LikedTracks []*LikedTrack

func (lt LikedTracks) config(cfg config) {
	for _i := range lt {
		lt[_i].config = cfg
	}
}
