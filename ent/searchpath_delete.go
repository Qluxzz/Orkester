// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"orkester/ent/predicate"
	"orkester/ent/searchpath"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SearchPathDelete is the builder for deleting a SearchPath entity.
type SearchPathDelete struct {
	config
	hooks    []Hook
	mutation *SearchPathMutation
}

// Where appends a list predicates to the SearchPathDelete builder.
func (spd *SearchPathDelete) Where(ps ...predicate.SearchPath) *SearchPathDelete {
	spd.mutation.Where(ps...)
	return spd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (spd *SearchPathDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, spd.sqlExec, spd.mutation, spd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (spd *SearchPathDelete) ExecX(ctx context.Context) int {
	n, err := spd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (spd *SearchPathDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(searchpath.Table, sqlgraph.NewFieldSpec(searchpath.FieldID, field.TypeInt))
	if ps := spd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, spd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	spd.mutation.done = true
	return affected, err
}

// SearchPathDeleteOne is the builder for deleting a single SearchPath entity.
type SearchPathDeleteOne struct {
	spd *SearchPathDelete
}

// Where appends a list predicates to the SearchPathDelete builder.
func (spdo *SearchPathDeleteOne) Where(ps ...predicate.SearchPath) *SearchPathDeleteOne {
	spdo.spd.mutation.Where(ps...)
	return spdo
}

// Exec executes the deletion query.
func (spdo *SearchPathDeleteOne) Exec(ctx context.Context) error {
	n, err := spdo.spd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{searchpath.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (spdo *SearchPathDeleteOne) ExecX(ctx context.Context) {
	if err := spdo.Exec(ctx); err != nil {
		panic(err)
	}
}
