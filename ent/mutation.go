// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"goreact/ent/album"
	"goreact/ent/artist"
	"goreact/ent/genre"
	"goreact/ent/predicate"
	"goreact/ent/track"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlbum  = "Album"
	TypeArtist = "Artist"
	TypeGenre  = "Genre"
	TypeTrack  = "Track"
)

// AlbumMutation represents an operation that mutates the Album nodes in the graph.
type AlbumMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	url_name        *string
	image           *[]byte
	image_mime_type *string
	clearedFields   map[string]struct{}
	artist          *int
	clearedartist   bool
	tracks          map[int]struct{}
	removedtracks   map[int]struct{}
	clearedtracks   bool
	done            bool
	oldValue        func(context.Context) (*Album, error)
	predicates      []predicate.Album
}

var _ ent.Mutation = (*AlbumMutation)(nil)

// albumOption allows management of the mutation configuration using functional options.
type albumOption func(*AlbumMutation)

// newAlbumMutation creates new mutation for the Album entity.
func newAlbumMutation(c config, op Op, opts ...albumOption) *AlbumMutation {
	m := &AlbumMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumID sets the ID field of the mutation.
func withAlbumID(id int) albumOption {
	return func(m *AlbumMutation) {
		var (
			err   error
			once  sync.Once
			value *Album
		)
		m.oldValue = func(ctx context.Context) (*Album, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Album.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbum sets the old Album of the mutation.
func withAlbum(node *Album) albumOption {
	return func(m *AlbumMutation) {
		m.oldValue = func(context.Context) (*Album, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AlbumMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *AlbumMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AlbumMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AlbumMutation) ResetName() {
	m.name = nil
}

// SetURLName sets the "url_name" field.
func (m *AlbumMutation) SetURLName(s string) {
	m.url_name = &s
}

// URLName returns the value of the "url_name" field in the mutation.
func (m *AlbumMutation) URLName() (r string, exists bool) {
	v := m.url_name
	if v == nil {
		return
	}
	return *v, true
}

// OldURLName returns the old "url_name" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldURLName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLName: %w", err)
	}
	return oldValue.URLName, nil
}

// ResetURLName resets all changes to the "url_name" field.
func (m *AlbumMutation) ResetURLName() {
	m.url_name = nil
}

// SetImage sets the "image" field.
func (m *AlbumMutation) SetImage(b []byte) {
	m.image = &b
}

// Image returns the value of the "image" field in the mutation.
func (m *AlbumMutation) Image() (r []byte, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldImage(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *AlbumMutation) ResetImage() {
	m.image = nil
}

// SetImageMimeType sets the "image_mime_type" field.
func (m *AlbumMutation) SetImageMimeType(s string) {
	m.image_mime_type = &s
}

// ImageMimeType returns the value of the "image_mime_type" field in the mutation.
func (m *AlbumMutation) ImageMimeType() (r string, exists bool) {
	v := m.image_mime_type
	if v == nil {
		return
	}
	return *v, true
}

// OldImageMimeType returns the old "image_mime_type" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldImageMimeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImageMimeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImageMimeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageMimeType: %w", err)
	}
	return oldValue.ImageMimeType, nil
}

// ResetImageMimeType resets all changes to the "image_mime_type" field.
func (m *AlbumMutation) ResetImageMimeType() {
	m.image_mime_type = nil
}

// SetArtistID sets the "artist" edge to the Artist entity by id.
func (m *AlbumMutation) SetArtistID(id int) {
	m.artist = &id
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (m *AlbumMutation) ClearArtist() {
	m.clearedartist = true
}

// ArtistCleared reports if the "artist" edge to the Artist entity was cleared.
func (m *AlbumMutation) ArtistCleared() bool {
	return m.clearedartist
}

// ArtistID returns the "artist" edge ID in the mutation.
func (m *AlbumMutation) ArtistID() (id int, exists bool) {
	if m.artist != nil {
		return *m.artist, true
	}
	return
}

// ArtistIDs returns the "artist" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArtistID instead. It exists only for internal usage by the builders.
func (m *AlbumMutation) ArtistIDs() (ids []int) {
	if id := m.artist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArtist resets all changes to the "artist" edge.
func (m *AlbumMutation) ResetArtist() {
	m.artist = nil
	m.clearedartist = false
}

// AddTrackIDs adds the "tracks" edge to the Track entity by ids.
func (m *AlbumMutation) AddTrackIDs(ids ...int) {
	if m.tracks == nil {
		m.tracks = make(map[int]struct{})
	}
	for i := range ids {
		m.tracks[ids[i]] = struct{}{}
	}
}

// ClearTracks clears the "tracks" edge to the Track entity.
func (m *AlbumMutation) ClearTracks() {
	m.clearedtracks = true
}

// TracksCleared reports if the "tracks" edge to the Track entity was cleared.
func (m *AlbumMutation) TracksCleared() bool {
	return m.clearedtracks
}

// RemoveTrackIDs removes the "tracks" edge to the Track entity by IDs.
func (m *AlbumMutation) RemoveTrackIDs(ids ...int) {
	if m.removedtracks == nil {
		m.removedtracks = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtracks[ids[i]] = struct{}{}
	}
}

// RemovedTracks returns the removed IDs of the "tracks" edge to the Track entity.
func (m *AlbumMutation) RemovedTracksIDs() (ids []int) {
	for id := range m.removedtracks {
		ids = append(ids, id)
	}
	return
}

// TracksIDs returns the "tracks" edge IDs in the mutation.
func (m *AlbumMutation) TracksIDs() (ids []int) {
	for id := range m.tracks {
		ids = append(ids, id)
	}
	return
}

// ResetTracks resets all changes to the "tracks" edge.
func (m *AlbumMutation) ResetTracks() {
	m.tracks = nil
	m.clearedtracks = false
	m.removedtracks = nil
}

// Op returns the operation name.
func (m *AlbumMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Album).
func (m *AlbumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, album.FieldName)
	}
	if m.url_name != nil {
		fields = append(fields, album.FieldURLName)
	}
	if m.image != nil {
		fields = append(fields, album.FieldImage)
	}
	if m.image_mime_type != nil {
		fields = append(fields, album.FieldImageMimeType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case album.FieldName:
		return m.Name()
	case album.FieldURLName:
		return m.URLName()
	case album.FieldImage:
		return m.Image()
	case album.FieldImageMimeType:
		return m.ImageMimeType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case album.FieldName:
		return m.OldName(ctx)
	case album.FieldURLName:
		return m.OldURLName(ctx)
	case album.FieldImage:
		return m.OldImage(ctx)
	case album.FieldImageMimeType:
		return m.OldImageMimeType(ctx)
	}
	return nil, fmt.Errorf("unknown Album field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case album.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case album.FieldURLName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLName(v)
		return nil
	case album.FieldImage:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case album.FieldImageMimeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageMimeType(v)
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Album numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Album nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumMutation) ResetField(name string) error {
	switch name {
	case album.FieldName:
		m.ResetName()
		return nil
	case album.FieldURLName:
		m.ResetURLName()
		return nil
	case album.FieldImage:
		m.ResetImage()
		return nil
	case album.FieldImageMimeType:
		m.ResetImageMimeType()
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.artist != nil {
		edges = append(edges, album.EdgeArtist)
	}
	if m.tracks != nil {
		edges = append(edges, album.EdgeTracks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeArtist:
		if id := m.artist; id != nil {
			return []ent.Value{*id}
		}
	case album.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.tracks))
		for id := range m.tracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtracks != nil {
		edges = append(edges, album.EdgeTracks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.removedtracks))
		for id := range m.removedtracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedartist {
		edges = append(edges, album.EdgeArtist)
	}
	if m.clearedtracks {
		edges = append(edges, album.EdgeTracks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumMutation) EdgeCleared(name string) bool {
	switch name {
	case album.EdgeArtist:
		return m.clearedartist
	case album.EdgeTracks:
		return m.clearedtracks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumMutation) ClearEdge(name string) error {
	switch name {
	case album.EdgeArtist:
		m.ClearArtist()
		return nil
	}
	return fmt.Errorf("unknown Album unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumMutation) ResetEdge(name string) error {
	switch name {
	case album.EdgeArtist:
		m.ResetArtist()
		return nil
	case album.EdgeTracks:
		m.ResetTracks()
		return nil
	}
	return fmt.Errorf("unknown Album edge %s", name)
}

// ArtistMutation represents an operation that mutates the Artist nodes in the graph.
type ArtistMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	url_name      *string
	clearedFields map[string]struct{}
	albums        map[int]struct{}
	removedalbums map[int]struct{}
	clearedalbums bool
	track         map[int]struct{}
	removedtrack  map[int]struct{}
	clearedtrack  bool
	done          bool
	oldValue      func(context.Context) (*Artist, error)
	predicates    []predicate.Artist
}

var _ ent.Mutation = (*ArtistMutation)(nil)

// artistOption allows management of the mutation configuration using functional options.
type artistOption func(*ArtistMutation)

// newArtistMutation creates new mutation for the Artist entity.
func newArtistMutation(c config, op Op, opts ...artistOption) *ArtistMutation {
	m := &ArtistMutation{
		config:        c,
		op:            op,
		typ:           TypeArtist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArtistID sets the ID field of the mutation.
func withArtistID(id int) artistOption {
	return func(m *ArtistMutation) {
		var (
			err   error
			once  sync.Once
			value *Artist
		)
		m.oldValue = func(ctx context.Context) (*Artist, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Artist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArtist sets the old Artist of the mutation.
func withArtist(node *Artist) artistOption {
	return func(m *ArtistMutation) {
		m.oldValue = func(context.Context) (*Artist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArtistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArtistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ArtistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ArtistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArtistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Artist entity.
// If the Artist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArtistMutation) ResetName() {
	m.name = nil
}

// SetURLName sets the "url_name" field.
func (m *ArtistMutation) SetURLName(s string) {
	m.url_name = &s
}

// URLName returns the value of the "url_name" field in the mutation.
func (m *ArtistMutation) URLName() (r string, exists bool) {
	v := m.url_name
	if v == nil {
		return
	}
	return *v, true
}

// OldURLName returns the old "url_name" field's value of the Artist entity.
// If the Artist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistMutation) OldURLName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLName: %w", err)
	}
	return oldValue.URLName, nil
}

// ResetURLName resets all changes to the "url_name" field.
func (m *ArtistMutation) ResetURLName() {
	m.url_name = nil
}

// AddAlbumIDs adds the "albums" edge to the Album entity by ids.
func (m *ArtistMutation) AddAlbumIDs(ids ...int) {
	if m.albums == nil {
		m.albums = make(map[int]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Album entity.
func (m *ArtistMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Album entity was cleared.
func (m *ArtistMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Album entity by IDs.
func (m *ArtistMutation) RemoveAlbumIDs(ids ...int) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[int]struct{})
	}
	for i := range ids {
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Album entity.
func (m *ArtistMutation) RemovedAlbumsIDs() (ids []int) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *ArtistMutation) AlbumsIDs() (ids []int) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *ArtistMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// AddTrackIDs adds the "track" edge to the Track entity by ids.
func (m *ArtistMutation) AddTrackIDs(ids ...int) {
	if m.track == nil {
		m.track = make(map[int]struct{})
	}
	for i := range ids {
		m.track[ids[i]] = struct{}{}
	}
}

// ClearTrack clears the "track" edge to the Track entity.
func (m *ArtistMutation) ClearTrack() {
	m.clearedtrack = true
}

// TrackCleared reports if the "track" edge to the Track entity was cleared.
func (m *ArtistMutation) TrackCleared() bool {
	return m.clearedtrack
}

// RemoveTrackIDs removes the "track" edge to the Track entity by IDs.
func (m *ArtistMutation) RemoveTrackIDs(ids ...int) {
	if m.removedtrack == nil {
		m.removedtrack = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtrack[ids[i]] = struct{}{}
	}
}

// RemovedTrack returns the removed IDs of the "track" edge to the Track entity.
func (m *ArtistMutation) RemovedTrackIDs() (ids []int) {
	for id := range m.removedtrack {
		ids = append(ids, id)
	}
	return
}

// TrackIDs returns the "track" edge IDs in the mutation.
func (m *ArtistMutation) TrackIDs() (ids []int) {
	for id := range m.track {
		ids = append(ids, id)
	}
	return
}

// ResetTrack resets all changes to the "track" edge.
func (m *ArtistMutation) ResetTrack() {
	m.track = nil
	m.clearedtrack = false
	m.removedtrack = nil
}

// Op returns the operation name.
func (m *ArtistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Artist).
func (m *ArtistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArtistMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, artist.FieldName)
	}
	if m.url_name != nil {
		fields = append(fields, artist.FieldURLName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArtistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case artist.FieldName:
		return m.Name()
	case artist.FieldURLName:
		return m.URLName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArtistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case artist.FieldName:
		return m.OldName(ctx)
	case artist.FieldURLName:
		return m.OldURLName(ctx)
	}
	return nil, fmt.Errorf("unknown Artist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case artist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case artist.FieldURLName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLName(v)
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArtistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArtistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArtistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArtistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArtistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Artist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArtistMutation) ResetField(name string) error {
	switch name {
	case artist.FieldName:
		m.ResetName()
		return nil
	case artist.FieldURLName:
		m.ResetURLName()
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArtistMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.albums != nil {
		edges = append(edges, artist.EdgeAlbums)
	}
	if m.track != nil {
		edges = append(edges, artist.EdgeTrack)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArtistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	case artist.EdgeTrack:
		ids := make([]ent.Value, 0, len(m.track))
		for id := range m.track {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArtistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedalbums != nil {
		edges = append(edges, artist.EdgeAlbums)
	}
	if m.removedtrack != nil {
		edges = append(edges, artist.EdgeTrack)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArtistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	case artist.EdgeTrack:
		ids := make([]ent.Value, 0, len(m.removedtrack))
		for id := range m.removedtrack {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArtistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedalbums {
		edges = append(edges, artist.EdgeAlbums)
	}
	if m.clearedtrack {
		edges = append(edges, artist.EdgeTrack)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArtistMutation) EdgeCleared(name string) bool {
	switch name {
	case artist.EdgeAlbums:
		return m.clearedalbums
	case artist.EdgeTrack:
		return m.clearedtrack
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArtistMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArtistMutation) ResetEdge(name string) error {
	switch name {
	case artist.EdgeAlbums:
		m.ResetAlbums()
		return nil
	case artist.EdgeTrack:
		m.ResetTrack()
		return nil
	}
	return fmt.Errorf("unknown Artist edge %s", name)
}

// GenreMutation represents an operation that mutates the Genre nodes in the graph.
type GenreMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	url_name      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Genre, error)
	predicates    []predicate.Genre
}

var _ ent.Mutation = (*GenreMutation)(nil)

// genreOption allows management of the mutation configuration using functional options.
type genreOption func(*GenreMutation)

// newGenreMutation creates new mutation for the Genre entity.
func newGenreMutation(c config, op Op, opts ...genreOption) *GenreMutation {
	m := &GenreMutation{
		config:        c,
		op:            op,
		typ:           TypeGenre,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenreID sets the ID field of the mutation.
func withGenreID(id int) genreOption {
	return func(m *GenreMutation) {
		var (
			err   error
			once  sync.Once
			value *Genre
		)
		m.oldValue = func(ctx context.Context) (*Genre, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Genre.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGenre sets the old Genre of the mutation.
func withGenre(node *Genre) genreOption {
	return func(m *GenreMutation) {
		m.oldValue = func(context.Context) (*Genre, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *GenreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *GenreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GenreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GenreMutation) ResetName() {
	m.name = nil
}

// SetURLName sets the "url_name" field.
func (m *GenreMutation) SetURLName(s string) {
	m.url_name = &s
}

// URLName returns the value of the "url_name" field in the mutation.
func (m *GenreMutation) URLName() (r string, exists bool) {
	v := m.url_name
	if v == nil {
		return
	}
	return *v, true
}

// OldURLName returns the old "url_name" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldURLName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLName: %w", err)
	}
	return oldValue.URLName, nil
}

// ResetURLName resets all changes to the "url_name" field.
func (m *GenreMutation) ResetURLName() {
	m.url_name = nil
}

// Op returns the operation name.
func (m *GenreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Genre).
func (m *GenreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GenreMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, genre.FieldName)
	}
	if m.url_name != nil {
		fields = append(fields, genre.FieldURLName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GenreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case genre.FieldName:
		return m.Name()
	case genre.FieldURLName:
		return m.URLName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GenreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case genre.FieldName:
		return m.OldName(ctx)
	case genre.FieldURLName:
		return m.OldURLName(ctx)
	}
	return nil, fmt.Errorf("unknown Genre field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GenreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case genre.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case genre.FieldURLName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLName(v)
		return nil
	}
	return fmt.Errorf("unknown Genre field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GenreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GenreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GenreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Genre numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GenreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GenreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Genre nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GenreMutation) ResetField(name string) error {
	switch name {
	case genre.FieldName:
		m.ResetName()
		return nil
	case genre.FieldURLName:
		m.ResetURLName()
		return nil
	}
	return fmt.Errorf("unknown Genre field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GenreMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GenreMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GenreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GenreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GenreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GenreMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GenreMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Genre unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GenreMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Genre edge %s", name)
}

// TrackMutation represents an operation that mutates the Track nodes in the graph.
type TrackMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	track_number    *int
	addtrack_number *int
	_path           *string
	date            *time.Time
	length          *int
	addlength       *int
	mimetype        *string
	clearedFields   map[string]struct{}
	artists         map[int]struct{}
	removedartists  map[int]struct{}
	clearedartists  bool
	album           *int
	clearedalbum    bool
	done            bool
	oldValue        func(context.Context) (*Track, error)
	predicates      []predicate.Track
}

var _ ent.Mutation = (*TrackMutation)(nil)

// trackOption allows management of the mutation configuration using functional options.
type trackOption func(*TrackMutation)

// newTrackMutation creates new mutation for the Track entity.
func newTrackMutation(c config, op Op, opts ...trackOption) *TrackMutation {
	m := &TrackMutation{
		config:        c,
		op:            op,
		typ:           TypeTrack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrackID sets the ID field of the mutation.
func withTrackID(id int) trackOption {
	return func(m *TrackMutation) {
		var (
			err   error
			once  sync.Once
			value *Track
		)
		m.oldValue = func(ctx context.Context) (*Track, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Track.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrack sets the old Track of the mutation.
func withTrack(node *Track) trackOption {
	return func(m *TrackMutation) {
		m.oldValue = func(context.Context) (*Track, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *TrackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *TrackMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TrackMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TrackMutation) ResetTitle() {
	m.title = nil
}

// SetTrackNumber sets the "track_number" field.
func (m *TrackMutation) SetTrackNumber(i int) {
	m.track_number = &i
	m.addtrack_number = nil
}

// TrackNumber returns the value of the "track_number" field in the mutation.
func (m *TrackMutation) TrackNumber() (r int, exists bool) {
	v := m.track_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackNumber returns the old "track_number" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldTrackNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTrackNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTrackNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackNumber: %w", err)
	}
	return oldValue.TrackNumber, nil
}

// AddTrackNumber adds i to the "track_number" field.
func (m *TrackMutation) AddTrackNumber(i int) {
	if m.addtrack_number != nil {
		*m.addtrack_number += i
	} else {
		m.addtrack_number = &i
	}
}

// AddedTrackNumber returns the value that was added to the "track_number" field in this mutation.
func (m *TrackMutation) AddedTrackNumber() (r int, exists bool) {
	v := m.addtrack_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrackNumber resets all changes to the "track_number" field.
func (m *TrackMutation) ResetTrackNumber() {
	m.track_number = nil
	m.addtrack_number = nil
}

// SetPath sets the "path" field.
func (m *TrackMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *TrackMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *TrackMutation) ResetPath() {
	m._path = nil
}

// SetDate sets the "date" field.
func (m *TrackMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *TrackMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *TrackMutation) ResetDate() {
	m.date = nil
}

// SetLength sets the "length" field.
func (m *TrackMutation) SetLength(i int) {
	m.length = &i
	m.addlength = nil
}

// Length returns the value of the "length" field in the mutation.
func (m *TrackMutation) Length() (r int, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old "length" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldLength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds i to the "length" field.
func (m *TrackMutation) AddLength(i int) {
	if m.addlength != nil {
		*m.addlength += i
	} else {
		m.addlength = &i
	}
}

// AddedLength returns the value that was added to the "length" field in this mutation.
func (m *TrackMutation) AddedLength() (r int, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength resets all changes to the "length" field.
func (m *TrackMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// SetMimetype sets the "mimetype" field.
func (m *TrackMutation) SetMimetype(s string) {
	m.mimetype = &s
}

// Mimetype returns the value of the "mimetype" field in the mutation.
func (m *TrackMutation) Mimetype() (r string, exists bool) {
	v := m.mimetype
	if v == nil {
		return
	}
	return *v, true
}

// OldMimetype returns the old "mimetype" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldMimetype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMimetype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMimetype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMimetype: %w", err)
	}
	return oldValue.Mimetype, nil
}

// ResetMimetype resets all changes to the "mimetype" field.
func (m *TrackMutation) ResetMimetype() {
	m.mimetype = nil
}

// AddArtistIDs adds the "artists" edge to the Artist entity by ids.
func (m *TrackMutation) AddArtistIDs(ids ...int) {
	if m.artists == nil {
		m.artists = make(map[int]struct{})
	}
	for i := range ids {
		m.artists[ids[i]] = struct{}{}
	}
}

// ClearArtists clears the "artists" edge to the Artist entity.
func (m *TrackMutation) ClearArtists() {
	m.clearedartists = true
}

// ArtistsCleared reports if the "artists" edge to the Artist entity was cleared.
func (m *TrackMutation) ArtistsCleared() bool {
	return m.clearedartists
}

// RemoveArtistIDs removes the "artists" edge to the Artist entity by IDs.
func (m *TrackMutation) RemoveArtistIDs(ids ...int) {
	if m.removedartists == nil {
		m.removedartists = make(map[int]struct{})
	}
	for i := range ids {
		m.removedartists[ids[i]] = struct{}{}
	}
}

// RemovedArtists returns the removed IDs of the "artists" edge to the Artist entity.
func (m *TrackMutation) RemovedArtistsIDs() (ids []int) {
	for id := range m.removedartists {
		ids = append(ids, id)
	}
	return
}

// ArtistsIDs returns the "artists" edge IDs in the mutation.
func (m *TrackMutation) ArtistsIDs() (ids []int) {
	for id := range m.artists {
		ids = append(ids, id)
	}
	return
}

// ResetArtists resets all changes to the "artists" edge.
func (m *TrackMutation) ResetArtists() {
	m.artists = nil
	m.clearedartists = false
	m.removedartists = nil
}

// SetAlbumID sets the "album" edge to the Album entity by id.
func (m *TrackMutation) SetAlbumID(id int) {
	m.album = &id
}

// ClearAlbum clears the "album" edge to the Album entity.
func (m *TrackMutation) ClearAlbum() {
	m.clearedalbum = true
}

// AlbumCleared reports if the "album" edge to the Album entity was cleared.
func (m *TrackMutation) AlbumCleared() bool {
	return m.clearedalbum
}

// AlbumID returns the "album" edge ID in the mutation.
func (m *TrackMutation) AlbumID() (id int, exists bool) {
	if m.album != nil {
		return *m.album, true
	}
	return
}

// AlbumIDs returns the "album" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlbumID instead. It exists only for internal usage by the builders.
func (m *TrackMutation) AlbumIDs() (ids []int) {
	if id := m.album; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlbum resets all changes to the "album" edge.
func (m *TrackMutation) ResetAlbum() {
	m.album = nil
	m.clearedalbum = false
}

// Op returns the operation name.
func (m *TrackMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Track).
func (m *TrackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrackMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, track.FieldTitle)
	}
	if m.track_number != nil {
		fields = append(fields, track.FieldTrackNumber)
	}
	if m._path != nil {
		fields = append(fields, track.FieldPath)
	}
	if m.date != nil {
		fields = append(fields, track.FieldDate)
	}
	if m.length != nil {
		fields = append(fields, track.FieldLength)
	}
	if m.mimetype != nil {
		fields = append(fields, track.FieldMimetype)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case track.FieldTitle:
		return m.Title()
	case track.FieldTrackNumber:
		return m.TrackNumber()
	case track.FieldPath:
		return m.Path()
	case track.FieldDate:
		return m.Date()
	case track.FieldLength:
		return m.Length()
	case track.FieldMimetype:
		return m.Mimetype()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case track.FieldTitle:
		return m.OldTitle(ctx)
	case track.FieldTrackNumber:
		return m.OldTrackNumber(ctx)
	case track.FieldPath:
		return m.OldPath(ctx)
	case track.FieldDate:
		return m.OldDate(ctx)
	case track.FieldLength:
		return m.OldLength(ctx)
	case track.FieldMimetype:
		return m.OldMimetype(ctx)
	}
	return nil, fmt.Errorf("unknown Track field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case track.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case track.FieldTrackNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackNumber(v)
		return nil
	case track.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case track.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case track.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	case track.FieldMimetype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMimetype(v)
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrackMutation) AddedFields() []string {
	var fields []string
	if m.addtrack_number != nil {
		fields = append(fields, track.FieldTrackNumber)
	}
	if m.addlength != nil {
		fields = append(fields, track.FieldLength)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrackMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case track.FieldTrackNumber:
		return m.AddedTrackNumber()
	case track.FieldLength:
		return m.AddedLength()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) AddField(name string, value ent.Value) error {
	switch name {
	case track.FieldTrackNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrackNumber(v)
		return nil
	case track.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	}
	return fmt.Errorf("unknown Track numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Track nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrackMutation) ResetField(name string) error {
	switch name {
	case track.FieldTitle:
		m.ResetTitle()
		return nil
	case track.FieldTrackNumber:
		m.ResetTrackNumber()
		return nil
	case track.FieldPath:
		m.ResetPath()
		return nil
	case track.FieldDate:
		m.ResetDate()
		return nil
	case track.FieldLength:
		m.ResetLength()
		return nil
	case track.FieldMimetype:
		m.ResetMimetype()
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrackMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.artists != nil {
		edges = append(edges, track.EdgeArtists)
	}
	if m.album != nil {
		edges = append(edges, track.EdgeAlbum)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case track.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.artists))
		for id := range m.artists {
			ids = append(ids, id)
		}
		return ids
	case track.EdgeAlbum:
		if id := m.album; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedartists != nil {
		edges = append(edges, track.EdgeArtists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case track.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.removedartists))
		for id := range m.removedartists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedartists {
		edges = append(edges, track.EdgeArtists)
	}
	if m.clearedalbum {
		edges = append(edges, track.EdgeAlbum)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrackMutation) EdgeCleared(name string) bool {
	switch name {
	case track.EdgeArtists:
		return m.clearedartists
	case track.EdgeAlbum:
		return m.clearedalbum
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrackMutation) ClearEdge(name string) error {
	switch name {
	case track.EdgeAlbum:
		m.ClearAlbum()
		return nil
	}
	return fmt.Errorf("unknown Track unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrackMutation) ResetEdge(name string) error {
	switch name {
	case track.EdgeArtists:
		m.ResetArtists()
		return nil
	case track.EdgeAlbum:
		m.ResetAlbum()
		return nil
	}
	return fmt.Errorf("unknown Track edge %s", name)
}
