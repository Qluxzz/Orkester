// Code generated by ent, DO NOT EDIT.

package albumimage

import (
	"orkester/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLTE(FieldID, id))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldImage, v))
}

// ImageMimeType applies equality check predicate on the "image_mime_type" field. It's identical to ImageMimeTypeEQ.
func ImageMimeType(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldImageMimeType, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...[]byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...[]byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v []byte) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLTE(FieldImage, v))
}

// ImageMimeTypeEQ applies the EQ predicate on the "image_mime_type" field.
func ImageMimeTypeEQ(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEQ(FieldImageMimeType, v))
}

// ImageMimeTypeNEQ applies the NEQ predicate on the "image_mime_type" field.
func ImageMimeTypeNEQ(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNEQ(FieldImageMimeType, v))
}

// ImageMimeTypeIn applies the In predicate on the "image_mime_type" field.
func ImageMimeTypeIn(vs ...string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldIn(FieldImageMimeType, vs...))
}

// ImageMimeTypeNotIn applies the NotIn predicate on the "image_mime_type" field.
func ImageMimeTypeNotIn(vs ...string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldNotIn(FieldImageMimeType, vs...))
}

// ImageMimeTypeGT applies the GT predicate on the "image_mime_type" field.
func ImageMimeTypeGT(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGT(FieldImageMimeType, v))
}

// ImageMimeTypeGTE applies the GTE predicate on the "image_mime_type" field.
func ImageMimeTypeGTE(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldGTE(FieldImageMimeType, v))
}

// ImageMimeTypeLT applies the LT predicate on the "image_mime_type" field.
func ImageMimeTypeLT(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLT(FieldImageMimeType, v))
}

// ImageMimeTypeLTE applies the LTE predicate on the "image_mime_type" field.
func ImageMimeTypeLTE(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldLTE(FieldImageMimeType, v))
}

// ImageMimeTypeContains applies the Contains predicate on the "image_mime_type" field.
func ImageMimeTypeContains(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldContains(FieldImageMimeType, v))
}

// ImageMimeTypeHasPrefix applies the HasPrefix predicate on the "image_mime_type" field.
func ImageMimeTypeHasPrefix(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldHasPrefix(FieldImageMimeType, v))
}

// ImageMimeTypeHasSuffix applies the HasSuffix predicate on the "image_mime_type" field.
func ImageMimeTypeHasSuffix(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldHasSuffix(FieldImageMimeType, v))
}

// ImageMimeTypeEqualFold applies the EqualFold predicate on the "image_mime_type" field.
func ImageMimeTypeEqualFold(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldEqualFold(FieldImageMimeType, v))
}

// ImageMimeTypeContainsFold applies the ContainsFold predicate on the "image_mime_type" field.
func ImageMimeTypeContainsFold(v string) predicate.AlbumImage {
	return predicate.AlbumImage(sql.FieldContainsFold(FieldImageMimeType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AlbumImage) predicate.AlbumImage {
	return predicate.AlbumImage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AlbumImage) predicate.AlbumImage {
	return predicate.AlbumImage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AlbumImage) predicate.AlbumImage {
	return predicate.AlbumImage(sql.NotPredicates(p))
}
