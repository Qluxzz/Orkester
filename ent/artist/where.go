// Code generated by ent, DO NOT EDIT.

package artist

import (
	"orkester/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldName, v))
}

// URLName applies equality check predicate on the "url_name" field. It's identical to URLNameEQ.
func URLName(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldURLName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContainsFold(FieldName, v))
}

// URLNameEQ applies the EQ predicate on the "url_name" field.
func URLNameEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldURLName, v))
}

// URLNameNEQ applies the NEQ predicate on the "url_name" field.
func URLNameNEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldURLName, v))
}

// URLNameIn applies the In predicate on the "url_name" field.
func URLNameIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldURLName, vs...))
}

// URLNameNotIn applies the NotIn predicate on the "url_name" field.
func URLNameNotIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldURLName, vs...))
}

// URLNameGT applies the GT predicate on the "url_name" field.
func URLNameGT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldURLName, v))
}

// URLNameGTE applies the GTE predicate on the "url_name" field.
func URLNameGTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldURLName, v))
}

// URLNameLT applies the LT predicate on the "url_name" field.
func URLNameLT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldURLName, v))
}

// URLNameLTE applies the LTE predicate on the "url_name" field.
func URLNameLTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldURLName, v))
}

// URLNameContains applies the Contains predicate on the "url_name" field.
func URLNameContains(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContains(FieldURLName, v))
}

// URLNameHasPrefix applies the HasPrefix predicate on the "url_name" field.
func URLNameHasPrefix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasPrefix(FieldURLName, v))
}

// URLNameHasSuffix applies the HasSuffix predicate on the "url_name" field.
func URLNameHasSuffix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasSuffix(FieldURLName, v))
}

// URLNameEqualFold applies the EqualFold predicate on the "url_name" field.
func URLNameEqualFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEqualFold(FieldURLName, v))
}

// URLNameContainsFold applies the ContainsFold predicate on the "url_name" field.
func URLNameContainsFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContainsFold(FieldURLName, v))
}

// HasAlbums applies the HasEdge predicate on the "albums" edge.
func HasAlbums() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AlbumsTable, AlbumsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlbumsWith applies the HasEdge predicate on the "albums" edge with a given conditions (other predicates).
func HasAlbumsWith(preds ...predicate.Album) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newAlbumsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTracks applies the HasEdge predicate on the "tracks" edge.
func HasTracks() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TracksTable, TracksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTracksWith applies the HasEdge predicate on the "tracks" edge with a given conditions (other predicates).
func HasTracksWith(preds ...predicate.Track) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newTracksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.NotPredicates(p))
}
