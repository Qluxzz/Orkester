// Code generated by entc, DO NOT EDIT.

package artist

const (
	// Label holds the string label denoting the artist type in the database.
	Label = "artist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURLName holds the string denoting the url_name field in the database.
	FieldURLName = "url_name"
	// EdgeAlbums holds the string denoting the albums edge name in mutations.
	EdgeAlbums = "albums"
	// EdgeTracks holds the string denoting the tracks edge name in mutations.
	EdgeTracks = "tracks"
	// Table holds the table name of the artist in the database.
	Table = "artists"
	// AlbumsTable is the table the holds the albums relation/edge.
	AlbumsTable = "albums"
	// AlbumsInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumsInverseTable = "albums"
	// AlbumsColumn is the table column denoting the albums relation/edge.
	AlbumsColumn = "artist_albums"
	// TracksTable is the table the holds the tracks relation/edge. The primary key declared below.
	TracksTable = "track_artists"
	// TracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TracksInverseTable = "tracks"
)

// Columns holds all SQL columns for artist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURLName,
}

var (
	// TracksPrimaryKey and TracksColumn2 are the table columns denoting the
	// primary key for the tracks relation (M2M).
	TracksPrimaryKey = []string{"track_id", "artist_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
