// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"orkester/ent/albumimage"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AlbumImage is the model entity for the AlbumImage schema.
type AlbumImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Image holds the value of the "image" field.
	Image []byte `json:"image,omitempty"`
	// ImageMimeType holds the value of the "image_mime_type" field.
	ImageMimeType string `json:"image_mime_type,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlbumImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case albumimage.FieldImage:
			values[i] = new([]byte)
		case albumimage.FieldID:
			values[i] = new(sql.NullInt64)
		case albumimage.FieldImageMimeType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlbumImage fields.
func (ai *AlbumImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case albumimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case albumimage.FieldImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value != nil {
				ai.Image = *value
			}
		case albumimage.FieldImageMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_mime_type", values[i])
			} else if value.Valid {
				ai.ImageMimeType = value.String
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlbumImage.
// This includes values selected through modifiers, order, etc.
func (ai *AlbumImage) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// Update returns a builder for updating this AlbumImage.
// Note that you need to call AlbumImage.Unwrap() before calling this method if this AlbumImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AlbumImage) Update() *AlbumImageUpdateOne {
	return NewAlbumImageClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AlbumImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AlbumImage) Unwrap() *AlbumImage {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlbumImage is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AlbumImage) String() string {
	var builder strings.Builder
	builder.WriteString("AlbumImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("image=")
	builder.WriteString(fmt.Sprintf("%v", ai.Image))
	builder.WriteString(", ")
	builder.WriteString("image_mime_type=")
	builder.WriteString(ai.ImageMimeType)
	builder.WriteByte(')')
	return builder.String()
}

// AlbumImages is a parsable slice of AlbumImage.
type AlbumImages []*AlbumImage
