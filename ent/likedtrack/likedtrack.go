// Code generated by ent, DO NOT EDIT.

package likedtrack

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the likedtrack type in the database.
	Label = "liked_track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateAdded holds the string denoting the date_added field in the database.
	FieldDateAdded = "date_added"
	// EdgeTrack holds the string denoting the track edge name in mutations.
	EdgeTrack = "track"
	// Table holds the table name of the likedtrack in the database.
	Table = "liked_tracks"
	// TrackTable is the table that holds the track relation/edge.
	TrackTable = "liked_tracks"
	// TrackInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TrackInverseTable = "tracks"
	// TrackColumn is the table column denoting the track relation/edge.
	TrackColumn = "track_liked"
)

// Columns holds all SQL columns for likedtrack fields.
var Columns = []string{
	FieldID,
	FieldDateAdded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "liked_tracks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"track_liked",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateAdded holds the default value on creation for the "date_added" field.
	DefaultDateAdded func() time.Time
)

// OrderOption defines the ordering options for the LikedTrack queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDateAdded orders the results by the date_added field.
func ByDateAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateAdded, opts...).ToFunc()
}

// ByTrackField orders the results by track field.
func ByTrackField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrackStep(), sql.OrderByField(field, opts...))
	}
}
func newTrackStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrackInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TrackTable, TrackColumn),
	)
}
