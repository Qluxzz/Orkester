// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlbumsColumns holds the columns for the "albums" table.
	AlbumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "url_name", Type: field.TypeString},
		{Name: "released", Type: field.TypeJSON},
		{Name: "album_cover", Type: field.TypeInt, Nullable: true},
		{Name: "artist_albums", Type: field.TypeInt},
	}
	// AlbumsTable holds the schema information for the "albums" table.
	AlbumsTable = &schema.Table{
		Name:       "albums",
		Columns:    AlbumsColumns,
		PrimaryKey: []*schema.Column{AlbumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "albums_album_images_cover",
				Columns:    []*schema.Column{AlbumsColumns[4]},
				RefColumns: []*schema.Column{AlbumImagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "albums_artists_albums",
				Columns:    []*schema.Column{AlbumsColumns[5]},
				RefColumns: []*schema.Column{ArtistsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "album_name_released_artist_albums",
				Unique:  true,
				Columns: []*schema.Column{AlbumsColumns[1], AlbumsColumns[3], AlbumsColumns[5]},
			},
		},
	}
	// AlbumImagesColumns holds the columns for the "album_images" table.
	AlbumImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "image", Type: field.TypeBytes},
		{Name: "image_mime_type", Type: field.TypeString},
	}
	// AlbumImagesTable holds the schema information for the "album_images" table.
	AlbumImagesTable = &schema.Table{
		Name:       "album_images",
		Columns:    AlbumImagesColumns,
		PrimaryKey: []*schema.Column{AlbumImagesColumns[0]},
	}
	// ArtistsColumns holds the columns for the "artists" table.
	ArtistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "url_name", Type: field.TypeString},
	}
	// ArtistsTable holds the schema information for the "artists" table.
	ArtistsTable = &schema.Table{
		Name:       "artists",
		Columns:    ArtistsColumns,
		PrimaryKey: []*schema.Column{ArtistsColumns[0]},
	}
	// LikedTracksColumns holds the columns for the "liked_tracks" table.
	LikedTracksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date_added", Type: field.TypeTime},
		{Name: "track_liked", Type: field.TypeInt, Unique: true},
	}
	// LikedTracksTable holds the schema information for the "liked_tracks" table.
	LikedTracksTable = &schema.Table{
		Name:       "liked_tracks",
		Columns:    LikedTracksColumns,
		PrimaryKey: []*schema.Column{LikedTracksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "liked_tracks_tracks_liked",
				Columns:    []*schema.Column{LikedTracksColumns[2]},
				RefColumns: []*schema.Column{TracksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SearchPathsColumns holds the columns for the "search_paths" table.
	SearchPathsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
	}
	// SearchPathsTable holds the schema information for the "search_paths" table.
	SearchPathsTable = &schema.Table{
		Name:       "search_paths",
		Columns:    SearchPathsColumns,
		PrimaryKey: []*schema.Column{SearchPathsColumns[0]},
	}
	// TracksColumns holds the columns for the "tracks" table.
	TracksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "track_number", Type: field.TypeInt},
		{Name: "path", Type: field.TypeString},
		{Name: "length", Type: field.TypeInt},
		{Name: "mimetype", Type: field.TypeString},
		{Name: "album_tracks", Type: field.TypeInt},
	}
	// TracksTable holds the schema information for the "tracks" table.
	TracksTable = &schema.Table{
		Name:       "tracks",
		Columns:    TracksColumns,
		PrimaryKey: []*schema.Column{TracksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tracks_albums_tracks",
				Columns:    []*schema.Column{TracksColumns[6]},
				RefColumns: []*schema.Column{AlbumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "track_track_number_title_album_tracks",
				Unique:  true,
				Columns: []*schema.Column{TracksColumns[2], TracksColumns[1], TracksColumns[6]},
			},
		},
	}
	// TrackArtistsColumns holds the columns for the "track_artists" table.
	TrackArtistsColumns = []*schema.Column{
		{Name: "track_id", Type: field.TypeInt},
		{Name: "artist_id", Type: field.TypeInt},
	}
	// TrackArtistsTable holds the schema information for the "track_artists" table.
	TrackArtistsTable = &schema.Table{
		Name:       "track_artists",
		Columns:    TrackArtistsColumns,
		PrimaryKey: []*schema.Column{TrackArtistsColumns[0], TrackArtistsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "track_artists_track_id",
				Columns:    []*schema.Column{TrackArtistsColumns[0]},
				RefColumns: []*schema.Column{TracksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "track_artists_artist_id",
				Columns:    []*schema.Column{TrackArtistsColumns[1]},
				RefColumns: []*schema.Column{ArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlbumsTable,
		AlbumImagesTable,
		ArtistsTable,
		LikedTracksTable,
		SearchPathsTable,
		TracksTable,
		TrackArtistsTable,
	}
)

func init() {
	AlbumsTable.ForeignKeys[0].RefTable = AlbumImagesTable
	AlbumsTable.ForeignKeys[1].RefTable = ArtistsTable
	LikedTracksTable.ForeignKeys[0].RefTable = TracksTable
	TracksTable.ForeignKeys[0].RefTable = AlbumsTable
	TrackArtistsTable.ForeignKeys[0].RefTable = TracksTable
	TrackArtistsTable.ForeignKeys[1].RefTable = ArtistsTable
}
