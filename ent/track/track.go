// Code generated by ent, DO NOT EDIT.

package track

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTrackNumber holds the string denoting the track_number field in the database.
	FieldTrackNumber = "track_number"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldMimetype holds the string denoting the mimetype field in the database.
	FieldMimetype = "mimetype"
	// EdgeArtists holds the string denoting the artists edge name in mutations.
	EdgeArtists = "artists"
	// EdgeAlbum holds the string denoting the album edge name in mutations.
	EdgeAlbum = "album"
	// EdgeLiked holds the string denoting the liked edge name in mutations.
	EdgeLiked = "liked"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// ArtistsTable is the table that holds the artists relation/edge. The primary key declared below.
	ArtistsTable = "track_artists"
	// ArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistsInverseTable = "artists"
	// AlbumTable is the table that holds the album relation/edge.
	AlbumTable = "tracks"
	// AlbumInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumInverseTable = "albums"
	// AlbumColumn is the table column denoting the album relation/edge.
	AlbumColumn = "album_tracks"
	// LikedTable is the table that holds the liked relation/edge.
	LikedTable = "liked_tracks"
	// LikedInverseTable is the table name for the LikedTrack entity.
	// It exists in this package in order to avoid circular dependency with the "likedtrack" package.
	LikedInverseTable = "liked_tracks"
	// LikedColumn is the table column denoting the liked relation/edge.
	LikedColumn = "track_liked"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldTrackNumber,
	FieldPath,
	FieldLength,
	FieldMimetype,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tracks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"album_tracks",
}

var (
	// ArtistsPrimaryKey and ArtistsColumn2 are the table columns denoting the
	// primary key for the artists relation (M2M).
	ArtistsPrimaryKey = []string{"track_id", "artist_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByTrackNumber orders the results by the track_number field.
func ByTrackNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackNumber, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}

// ByMimetype orders the results by the mimetype field.
func ByMimetype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimetype, opts...).ToFunc()
}

// ByArtistsCount orders the results by artists count.
func ByArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtistsStep(), opts...)
	}
}

// ByArtists orders the results by artists terms.
func ByArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAlbumField orders the results by album field.
func ByAlbumField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlbumStep(), sql.OrderByField(field, opts...))
	}
}

// ByLikedField orders the results by liked field.
func ByLikedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikedStep(), sql.OrderByField(field, opts...))
	}
}
func newArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ArtistsTable, ArtistsPrimaryKey...),
	)
}
func newAlbumStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlbumInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AlbumTable, AlbumColumn),
	)
}
func newLikedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LikedTable, LikedColumn),
	)
}
