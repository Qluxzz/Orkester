// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"orkester/ent/likedtrack"
	"orkester/ent/predicate"
	"orkester/ent/track"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikedTrackUpdate is the builder for updating LikedTrack entities.
type LikedTrackUpdate struct {
	config
	hooks    []Hook
	mutation *LikedTrackMutation
}

// Where appends a list predicates to the LikedTrackUpdate builder.
func (ltu *LikedTrackUpdate) Where(ps ...predicate.LikedTrack) *LikedTrackUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetTrackID sets the "track" edge to the Track entity by ID.
func (ltu *LikedTrackUpdate) SetTrackID(id int) *LikedTrackUpdate {
	ltu.mutation.SetTrackID(id)
	return ltu
}

// SetTrack sets the "track" edge to the Track entity.
func (ltu *LikedTrackUpdate) SetTrack(t *Track) *LikedTrackUpdate {
	return ltu.SetTrackID(t.ID)
}

// Mutation returns the LikedTrackMutation object of the builder.
func (ltu *LikedTrackUpdate) Mutation() *LikedTrackMutation {
	return ltu.mutation
}

// ClearTrack clears the "track" edge to the Track entity.
func (ltu *LikedTrackUpdate) ClearTrack() *LikedTrackUpdate {
	ltu.mutation.ClearTrack()
	return ltu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LikedTrackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ltu.hooks) == 0 {
		if err = ltu.check(); err != nil {
			return 0, err
		}
		affected, err = ltu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikedTrackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltu.check(); err != nil {
				return 0, err
			}
			ltu.mutation = mutation
			affected, err = ltu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ltu.hooks) - 1; i >= 0; i-- {
			if ltu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LikedTrackUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LikedTrackUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LikedTrackUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LikedTrackUpdate) check() error {
	if _, ok := ltu.mutation.TrackID(); ltu.mutation.TrackCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LikedTrack.track"`)
	}
	return nil
}

func (ltu *LikedTrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likedtrack.Table,
			Columns: likedtrack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likedtrack.FieldID,
			},
		},
	}
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ltu.mutation.TrackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   likedtrack.TrackTable,
			Columns: []string{likedtrack.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: track.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.TrackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   likedtrack.TrackTable,
			Columns: []string{likedtrack.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: track.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likedtrack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LikedTrackUpdateOne is the builder for updating a single LikedTrack entity.
type LikedTrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikedTrackMutation
}

// SetTrackID sets the "track" edge to the Track entity by ID.
func (ltuo *LikedTrackUpdateOne) SetTrackID(id int) *LikedTrackUpdateOne {
	ltuo.mutation.SetTrackID(id)
	return ltuo
}

// SetTrack sets the "track" edge to the Track entity.
func (ltuo *LikedTrackUpdateOne) SetTrack(t *Track) *LikedTrackUpdateOne {
	return ltuo.SetTrackID(t.ID)
}

// Mutation returns the LikedTrackMutation object of the builder.
func (ltuo *LikedTrackUpdateOne) Mutation() *LikedTrackMutation {
	return ltuo.mutation
}

// ClearTrack clears the "track" edge to the Track entity.
func (ltuo *LikedTrackUpdateOne) ClearTrack() *LikedTrackUpdateOne {
	ltuo.mutation.ClearTrack()
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LikedTrackUpdateOne) Select(field string, fields ...string) *LikedTrackUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LikedTrack entity.
func (ltuo *LikedTrackUpdateOne) Save(ctx context.Context) (*LikedTrack, error) {
	var (
		err  error
		node *LikedTrack
	)
	if len(ltuo.hooks) == 0 {
		if err = ltuo.check(); err != nil {
			return nil, err
		}
		node, err = ltuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikedTrackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltuo.check(); err != nil {
				return nil, err
			}
			ltuo.mutation = mutation
			node, err = ltuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ltuo.hooks) - 1; i >= 0; i-- {
			if ltuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ltuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LikedTrack)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LikedTrackMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LikedTrackUpdateOne) SaveX(ctx context.Context) *LikedTrack {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LikedTrackUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LikedTrackUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LikedTrackUpdateOne) check() error {
	if _, ok := ltuo.mutation.TrackID(); ltuo.mutation.TrackCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LikedTrack.track"`)
	}
	return nil
}

func (ltuo *LikedTrackUpdateOne) sqlSave(ctx context.Context) (_node *LikedTrack, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likedtrack.Table,
			Columns: likedtrack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likedtrack.FieldID,
			},
		},
	}
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LikedTrack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likedtrack.FieldID)
		for _, f := range fields {
			if !likedtrack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likedtrack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ltuo.mutation.TrackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   likedtrack.TrackTable,
			Columns: []string{likedtrack.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: track.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.TrackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   likedtrack.TrackTable,
			Columns: []string{likedtrack.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: track.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LikedTrack{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likedtrack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
